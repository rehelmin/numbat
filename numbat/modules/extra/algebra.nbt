use core::error
use core::functions

fn _qe_solution<A: Dim, B: Dim>(a: A, b: B, c: B² / A, sign: Scalar) -> B / A =
  (-b + sign × sqrt(b² - 4 a c)) / 2 a

@name("Solve quadratic equations")
@url("https://en.wikipedia.org/wiki/Quadratic_equation")
@description("Returns the solutions of the equation a x² + b x + c = 0")
@example("quadratic_equation(2, -1, -1)", "Solve the equation $2x² -x -1 = 0$")
fn quadratic_equation<A: Dim, B: Dim>(a: A, b: B, c: B² / A) -> List<B / A> =
  if a == 0
    then if b == 0
      then if c == 0
        then error("infinitely many solutions")
        else []
      else [-c / b]
    else if b² < 4 a c
      then []
      else if b² == 4 a c
        then [-b / 2 a]
        else [_qe_solution(a, b, c, 1), _qe_solution(a, b, c, -1)]

@name("Solve cubic equations")
@url("https://en.wikipedia.org/wiki/Cubic_equation")
@description("Returns the solutions of the equation a x³ + b x² + c x + e = 0")
@example("cubic_equation(1, -6, 11, -6)", "Solve the equation $x³ - 6x² + 11x - 6 = 0$")
fn cubic_equation(a: Scalar, b: Scalar, c: Scalar, e: Scalar) -> List<Scalar>
